/* tslint:disable */
/* eslint-disable */
/**
 * OpenShock.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Control } from './Control';
import {
    ControlFromJSON,
    ControlFromJSONTyped,
    ControlToJSON,
} from './Control';

/**
 * 
 * @export
 * @interface ControlRequest
 */
export interface ControlRequest {
    /**
     * 
     * @type {Array<Control>}
     * @memberof ControlRequest
     */
    shocks?: Array<Control> | null;
    /**
     * 
     * @type {string}
     * @memberof ControlRequest
     */
    customName?: string | null;
}

/**
 * Check if a given object implements the ControlRequest interface.
 */
export function instanceOfControlRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ControlRequestFromJSON(json: any): ControlRequest {
    return ControlRequestFromJSONTyped(json, false);
}

export function ControlRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ControlRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'shocks': !exists(json, 'shocks') ? undefined : (json['shocks'] === null ? null : (json['shocks'] as Array<any>).map(ControlFromJSON)),
        'customName': !exists(json, 'customName') ? undefined : json['customName'],
    };
}

export function ControlRequestToJSON(value?: ControlRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'shocks': value.shocks === undefined ? undefined : (value.shocks === null ? null : (value.shocks as Array<any>).map(ControlToJSON)),
        'customName': value.customName,
    };
}

