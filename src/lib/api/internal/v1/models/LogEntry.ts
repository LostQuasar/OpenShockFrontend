/* tslint:disable */
/* eslint-disable */
/**
 * OpenShock.API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ControlLogSenderLight } from './ControlLogSenderLight';
import {
    ControlLogSenderLightFromJSON,
    ControlLogSenderLightFromJSONTyped,
    ControlLogSenderLightToJSON,
} from './ControlLogSenderLight';
import type { ControlType } from './ControlType';
import {
    ControlTypeFromJSON,
    ControlTypeFromJSONTyped,
    ControlTypeToJSON,
} from './ControlType';

/**
 * 
 * @export
 * @interface LogEntry
 */
export interface LogEntry {
    /**
     * 
     * @type {string}
     * @memberof LogEntry
     */
    id?: string;
    /**
     * 
     * @type {Date}
     * @memberof LogEntry
     */
    createdOn?: Date;
    /**
     * 
     * @type {ControlType}
     * @memberof LogEntry
     */
    type?: ControlType;
    /**
     * 
     * @type {ControlLogSenderLight}
     * @memberof LogEntry
     */
    controlledBy?: ControlLogSenderLight;
    /**
     * 
     * @type {number}
     * @memberof LogEntry
     */
    intensity?: number;
    /**
     * 
     * @type {number}
     * @memberof LogEntry
     */
    duration?: number;
}

/**
 * Check if a given object implements the LogEntry interface.
 */
export function instanceOfLogEntry(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function LogEntryFromJSON(json: any): LogEntry {
    return LogEntryFromJSONTyped(json, false);
}

export function LogEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): LogEntry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'createdOn': !exists(json, 'createdOn') ? undefined : (new Date(json['createdOn'])),
        'type': !exists(json, 'type') ? undefined : ControlTypeFromJSON(json['type']),
        'controlledBy': !exists(json, 'controlledBy') ? undefined : ControlLogSenderLightFromJSON(json['controlledBy']),
        'intensity': !exists(json, 'intensity') ? undefined : json['intensity'],
        'duration': !exists(json, 'duration') ? undefined : json['duration'],
    };
}

export function LogEntryToJSON(value?: LogEntry | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'createdOn': value.createdOn === undefined ? undefined : (value.createdOn.toISOString()),
        'type': ControlTypeToJSON(value.type),
        'controlledBy': ControlLogSenderLightToJSON(value.controlledBy),
        'intensity': value.intensity,
        'duration': value.duration,
    };
}

